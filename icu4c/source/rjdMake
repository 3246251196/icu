#!/bin/bash --

set -o pipefail

CROSS_BUILD_FULL_PATH="$(pwd)/buildLinux"
if [[ -z $CORES ]]
then
    CORES="$(nproc)"
fi
C_LIB=clib2
# Too lazy to use getopts!
if (( ${#} > 0 ))
then
    if [[ "${1}" == "clib=newlib" ]]
    then
	C_LIB=newlib
    elif [[ "${1}" != "clib=clib2" ]]
    then
	echo "Could not understand argumet ${1}. Only clib=<newlib|clib2[default]> is understood" 1>&2
	exit 1
    fi
fi
INSTALL_PREFIX="$(pwd)/buildAmiga/installAmiga_${C_LIB}"

which ppc-amigaos-gcc 1>/dev/null 2>&1 || { echo "ppc-amigaos-* binaries not found. Check your path" ; exit 1 ; }
if [[ "Linux" != "$(uname)" ]]
then
    echo "Expected the BUILD machine to be Linux"
    exit 1
fi

function create_amiga_SDK_package
{
    SDK_DIRS=(
	"local/${C_LIB}/bin"
	"local/${C_LIB}/lib"
	"local/${C_LIB}/share/libicu/man"
	"local/${C_LIB}/sbin"
	"local/common/include"
    )

    for sdk_dir in "${SDK_DIRS[@]}"
    do
	mkdir -p "${sdk_dir}"
	find "${INSTALL_PREFIX}" -type d -iname "$(basename ${sdk_dir})" -exec cp -r {}/. "${sdk_dir}" \;
    done
}

# Assume that we do not need to build Linux again if buildLinux already exists!
if mkdir buildLinux
then
    pushd buildLinux
    git restore ../common/putilimp.h # just to make sure - since we hack it for Amiga (for clib2, and, if it was never changed, no harm anyway)
    ../runConfigureICU Linux/gcc || { echo "Error during BUILD-MACHINE configure" ; exit 1 ; }
    echo "####" >> buildLinux.log
    echo "#### $(date)" >> buildLinux.log
    echo "####" >> buildLinux.log
    make VERBOSE=1 -j "${CORES}" 2>&1 | tee -a buildLinux.log || { echo "Error during building for BUILD-MACHINE (see buildLinux/buildLinux.log)" ; exit 1 ; }
    popd
else
    echo "buildLinux already exists. Assuming that it does not need building."
fi

mkdir buildAmiga

pushd buildAmiga
# default to linux
cp ../config/mh-linux ../config/mh-unknown

if [[ "${C_LIB}" == "clib2" ]]
then
# __timezone hack
    sed -i 's,#elif defined(__GLIBC__)$,#elif defined(__GLIBC__) \&\& !defined(__amigaos4__),g' ../common/putilimp.h
else
    :
fi

mkdir -p "${INSTALL_PREFIX}"

# We use std-gnu++11 because we need the non-strict extensions for
# NEWLIB. We just use this for clib2 too !
#
../configure \
    CC="ppc-amigaos-gcc" \
    CXX="ppc-amigaos-g++" \
    CPPFLAGS="-mcrt=${C_LIB}" \
    CXXFLAGS="-mcrt=${C_LIB} -std=gnu++11 -fPIC" \
    CFLAGS="-mcrt=${C_LIB} -fPIC" \
    LDFLAGS="-mcrt=${C_LIB} -athread=native" \
    PKG_CONFIG_LIBDIR="/sdk/local/${C_CLIB}/lib/pkgconfig" \
    --disable-shared   \
    --enable-static    \
    --disable-dyload   \
    --enable-release   \
    --disable-debug    \
    --enable-tests     \
    --enable-samples   \
    --enable-extras    \
    --enable-layoutex  \
    --host=ppc-amigaos \
    --with-cross-build="$CROSS_BUILD_FULL_PATH" \
    --prefix="${INSTALL_PREFIX}" || \
        { echo "Error during configure" ; exit 1 ; }

if [[ ! -f "rjdLast_${C_LIB}" ]]
then
    # clean everything, we are now building for a different C library
    make clean 2>&1
fi

if ! grep '###RJD' data/Makefile
then
    if [[ ! "$(sed -n '176p' data/Makefile)" =~ '$(PKGDATA_INVOKE)' ]]
    then
	echo "Unexpected line found in line 176 of data/Makefile. It seems this version of ICU is different from when this script was written. See 'rjdMake' for this error text to understand the edits and/or contact 3246251196ryan@gmail.com." 1>&2
	exit 1
    fi
    insert='@if [[ ! -f ../../libicudata.a ]] ; then echo "###RJD: Would have invoked: \\"$(PKGDATA_INVOKE) $(PKGDATA) -e $(ICUDATA_ENTRY_POINT) -T $(OUTTMPDIR) -p $(ICUDATA_NAME) -m $(PKGDATA_MODE) $(PKGDATA_VERSIONING) $(PKGDATA_LIBNAME) $(PKGDATA_LIST)\\". This will have to be done manually on the Amiga and then the resuling libicudata.a copied into $$(pwd)/../../ (ask 3246251196ryan@gmail.com to eventually create a script to do be able to just zip something up, copy it to your amiga, decompress, run script on Amiga and get the library and copy it back to this machine to proceed)" ; exit 1 ; else cp ../../libicudata.a ../lib ; fi'

    sed -i "176d" data/Makefile
    sed -i "176i \	${insert}" data/Makefile
fi
echo "####" >> buildAmiga.log
echo "#### $(date)" >> buildAmiga.log
echo "####" >> buildAmiga.log
make VERBOSE=1 -j "${CORES}" 2>&1 | tee -a buildAmiga.log || { echo "Error during building for HOST-MACHINE (see buildAmiga/buildAmiga.log)" ; exit 1 ; }

make install

# We just this empty file to signal which C library was built last
rm -f rjdLast_*
touch "rjdLast_${C_LIB}"
popd

create_amiga_SDK_package

lha a libicu_72.1.lha local/

echo "#########"
echo "#########"
echo "Finished. For the SDK package see libicu_72.1.lha"
echo "#########"
echo "#########"

exit 0
