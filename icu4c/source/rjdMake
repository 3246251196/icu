#!/bin/bash --

CROSS_BUILD_FULL_PATH="$(pwd)/buildLinux"
CORES="$(nproc)"
C_LIB=clib2
# Too lazy to use getopts!
if (( ${#} > 0 ))
then
    if [[ "${1}" == "clib=newlib" ]]
    then
	C_LIB=newlib
    elif [[ "${1}" != "clib=clib2" ]]
    then
	echo "Could not understand argumet ${1}. Only clib=<newlib|clib2[default]> is understood" 1>&2
	exit 1
    fi
fi
INSTALL_PREFIX="$(pwd)/buildAmiga/installAmiga_${C_LIB}"

which ppc-amigaos-gcc 1>/dev/null 2>&1 || { echo "ppc-amigaos-* binaries not found. Check your path" ; exit 1 ; }
if [[ "Linux" != "$(uname)" ]]
then
    echo "Expected the BUILD machine to be Linux"
    exit 1
fi

function create_amiga_SDK_package
{
    SDK_DIRS=(
	"local/${C_LIB}/bin"
	"local/${C_LIB}/lib"
	"local/${C_LIB}/share/libicu/man"
	"local/${C_LIB}/sbin"
	"local/common/include"
    )

    for sdk_dir in "${SDK_DIRS[@]}"
    do
	mkdir -p "${sdk_dir}"
	find "${INSTALL_PREFIX}" -type d -iname "$(basename ${sdk_dir})" -exec cp -r {}/. "${sdk_dir}" \;
    done
}

# Assume that we do not need to build Linux again if buildLinux already exists!
if mkdir buildLinux
then
    pushd buildLinux
    git restore ../common/putilimp.h # just to make sure - since we hack it for Amiga
    ../runConfigureICU Linux/gcc || { echo "Error during BUILD-MACHINE configure" ; exit 1 ; }
    make VERBOSE=1 -j "${CORES}" 1>buildLinux.log 2>&1 || { echo "Error during building for BUILD-MACHINE" ; exit 1 ; }
    popd
else
    echo "buildLinux already exists. Assuming that it does not need building."
fi

mkdir buildAmiga

pushd buildAmiga
# default to linux
cp ../config/mh-linux ../config/mh-unknown

if [[ "${C_LIB}" == "clib2" ]]
then
# __timezone hack
    sed -i 's,#elif defined(__GLIBC__)$,#elif defined(__GLIBC__) \&\& !defined(__amigaos4__),g' ../common/putilimp.h
else
    :
fi

mkdir -p "${INSTALL_PREFIX}"

# We use std-gnu++11 because we need the non-strict extensions for
# NEWLIB. We just use this for clib2 too !
../configure \
    CC="ppc-amigaos-gcc" \
    CXX="ppc-amigaos-g++" \
    CPPFLAGS="-mcrt=${C_LIB}" \
    CXXFLAGS="-mcrt=${C_LIB} -std=gnu++11 -fPIC" \
    CFLAGS="-mcrt=${C_LIB} -fPIC" \
    LDFLAGS="-mcrt=${C_LIB} -athread=native" \
    PKG_CONFIG_LIBDIR="/sdk/local/${C_CLIB}/lib/pkgconfig" \
    --disable-tests --disable-samples --disable-shared --enable-static --disable-dyload --enable-release --disable-extras \
    --disable-debug \
    --host=ppc-amigaos \
    --with-cross-build="$CROSS_BUILD_FULL_PATH" \
    --prefix="${INSTALL_PREFIX}" || \
        { echo "Error during configure" ; exit 1 ; }

if [[ ! -f "rjdLast_${C_LIB}" ]]
then
    # clean everything, we are now building for a different C library
    make clean 2>&1
fi

SUCC="successful"

if ! grep '###RJD' data/Makefile
then
    if [[ ! "$(sed -n '176p' data/Makefile)" =~ '$(PKGDATA_INVOKE)' ]]
    then
	echo "Unexpected line found in line 176 of data/Makefile" 1>&2
	exit 1
    fi
    insert='@if [[ ! -f ../../libicudata.a ]] ; then echo "###RJD: Would have invoked: \\"$(PKGDATA_INVOKE) $(PKGDATA) -e $(ICUDATA_ENTRY_POINT) -T $(OUTTMPDIR) -p $(ICUDATA_NAME) -m $(PKGDATA_MODE) $(PKGDATA_VERSIONING) $(PKGDATA_LIBNAME) $(PKGDATA_LIST)\\". This will have to be done manually on the Amiga and then the resuling libicudata.a copied into $$(pwd)/../../" ; exit 1 ; else cp ../../libicudata.a ../lib ; fi'

    sed -i "176d" data/Makefile
    sed -i "176i \	${insert}" data/Makefile
fi
make VERBOSE=1 -j "${CORES}" 1>buildAmiga.log 2>&1 || { echo "Error during building for HOST-MACHINE" ; exit 1 ; }

make install

# We just this empty file to signal which C library was built last
rm -f rjdLast_*
touch "rjdLast_${C_LIB}"
popd

create_amiga_SDK_package

lha a libicu_72.1.lha local/

echo "#########"
echo "#########"
echo "Finished. CROSS-MACHINE building was ${SUCC}. For the SDK package see libicu.lha"
echo "#########"
echo "#########"

exit 0
