#!/bin/bash --

set -o pipefail
C_LIB=

function _ERROR()
{
    echo "ERROR: $1" 2>&1
    exit $2
}
function _WARNING()
{
    echo "WARN : $1" 2>&1
}
function _INFO()
{
    echo "INFO : $1"
}   
function determine_last_c_library
{
    C_LIB="$(ls buildAmiga/rjdLast_* 1>/dev/null 2>&1)"
    if (( !$? ))
    then
	C_LIB="$(ls buildAmiga/rjdLast_* | sed 's,^.*rjdLast_\(.*\),\1,')"
	_INFO "Partial build found. Using last c library version of: $C_LIB"
    else
	_ERROR "Was asked to determine last used c library version, but it looks like a partial build has not been performed! Or, intially, the \"clib\" option was not provided to this script." 8
    fi
}

function create_amiga_SDK_package
{
    SDK_DIRS=(
	"local/${C_LIB}/bin"
	"local/${C_LIB}/lib"
	"local/${C_LIB}/share/libicu/man"
	"local/${C_LIB}/sbin"
	"local/common/include"
    )

    for sdk_dir in "${SDK_DIRS[@]}"
    do
	mkdir -p "${sdk_dir}"
	find "${INSTALL_PREFIX}" -type d -iname "$(basename ${sdk_dir})" -exec cp -r {}/. "${sdk_dir}" \;
    done
}

function lha_files_for_amiga
{
    mkdir lha_files_for_amiga_${C_LIB}
    pushd lha_files_for_amiga_${C_LIB}

    mkdir _OUT _TMP
    mkdir include
    { 	cp ../buildAmiga/lib                           -r       . &&
	cp ../buildAmiga/bin                           -r       . &&
	cp ../buildAmiga/data/out/build/icudt72b       -r       . &&
	cp ../buildAmiga/data/out/tmp/icudata.lst               . &&
	cp ../buildAmiga/data/icupkg.inc                        . &&
	cp ../buildAmiga/common                        -r       . &&
	cp ../common                                   -r include &&
	cp ../buildAmiga/data/icupkg.inc                        .  ;
    } || _ERROR "Could not find expected partial build files to create amiga files" 110
    sed -i 's,ppc-amigaos-,,g' icupkg.inc
    sed -i 's,-I../../common,-Iinclude/common,' icupkg.inc
    sed -i 's,-I../common,-Icommon,' icupkg.inc
    echo "bin/pkgdata -O icupkg.inc -c -s icudt72b -d _OUT -e icudt72  -T _TMP -p icudt72b -m static -r 72.1 -L icudata_${C_LIB} icudata.lst" > \
	 amigaRunMe
    chmod +x amigaRunMe
    popd

    lha a lha_files_for_amiga_${C_LIB}.lha lha_files_for_amiga_${C_LIB}
    
    _INFO "Copy LHA lha_files_for_amiga_${C_LIB}.lha to your Amiga and extract and perform \"execute amigaRunMe\". Once completed on the AmigaOne, copy the generated \"_OUT/libicudata_${C_LIB}.a\" to \"$(pwd)\" and re-invoke the \"rjdMake\" script; building will resume from this point using the correctly generated \"libicudata_${C_LIB}.a\"."
    exit 0
}

function print_usage()
{
echo \
"Usage: $1 [[clib=(newlib|clib2|clib4)]|amigafiles]
      : clib       - Which c library to use for building
      : amigafiles - Generate an LHA containing necessary files to continue building on a Big Endian AmigaOne

        Press CTRL-C to abort now. Will resume in 5 seconds
"
}
print_usage

sleep 5

CROSS_BUILD_FULL_PATH="$(pwd)/buildLinux"

if [[ -z $CORES ]]
then
    CORES="$(nproc)"
fi
# Too lazy to use getopts!
if (( ${#} > 0 ))
then
    if [[ "${1}" == "clib=newlib" ]]
    then
	C_LIB=newlib
    elif [[ "${1}" == "clib=clib2" ]]
    then
        C_LIB=clib2
    elif [[ "${1}" == "clib=clib4" ]]
    then
        C_LIB=clib4
    elif [[ "${1}" == "amigafiles" ]]
    then
	determine_last_c_library
	lha_files_for_amiga
    else
	_ERROR "Could not understand argument ${1}" 10
	exit 10
    fi
else
    determine_last_c_library
fi

INSTALL_PREFIX="$(pwd)/buildAmiga/installAmiga_${C_LIB}"

which ppc-amigaos-gcc 1>/dev/null 2>&1 || { _ERROR "ppc-amigaos-* binaries not found. Check your path" 20 ; }
if [[ "Linux" != "$(uname)" ]]
then
    _ERROR "Expected the BUILD machine to be Linux" 30
fi

# Assume that we do not need to build Linux again if buildLinux already exists!
if mkdir buildLinux
then
    pushd buildLinux
    git restore ../common/putilimp.h # just to make sure - since we hack it for Amiga (for clib2, and, if it was never changed, no harm anyway)
    ../runConfigureICU Linux/gcc || { echo "Error during BUILD-MACHINE configure" ; exit 50 ; }
    echo "####" >> buildLinux.log
    echo "#### $(date)" >> buildLinux.log
    echo "####" >> buildLinux.log
    make VERBOSE=1 -j "${CORES}" 2>&1 | tee -a buildLinux.log || { _ERROR "Error during building for BUILD-MACHINE (see buildLinux/buildLinux.log)" 60 ; }
    popd
else
    _INFO "buildLinux already exists. Assuming that it does not need building."
fi

if [[ -d buildAmiga ]]
then
    curr_C_LIB="${C_LIB}"
    determine_last_c_library
    if [[ "${curr_C_LIB}" != "${C_LIB}" ]]
    then
	# This time, the user wants to build for a different c library. let's clean out buildAmiga
	C_LIB="${curr_C_LIB}"
	rm -rf buildAmiga/*
    fi
else
    mkdir buildAmiga
fi

pushd buildAmiga
touch "rjdLast_${C_LIB}"

# default to linux
cp ../config/mh-linux ../config/mh-unknown

if [[ "${C_LIB}" == "clib2" ]] # TODO: Does this also need to apply for clib4 now?
then
# __timezone hack
    sed -i 's,#elif defined(__GLIBC__)$,#elif defined(__GLIBC__) \&\& !defined(__amigaos4__),g' ../common/putilimp.h
else
    :
fi

mkdir -p "${INSTALL_PREFIX}"

# We use std-gnu++11 because we need the non-strict extensions for
# NEWLIB. We just use this for clib2 too !
#
# extras lib is disabled for now - since that also requires the Amiga to complete building
# for now I do not think this is necessary - it could be done, with some extra work.
../configure \
    CC="ppc-amigaos-gcc" \
    CXX="ppc-amigaos-g++" \
    CPPFLAGS="-mcrt=${C_LIB}" \
    CXXFLAGS="-mcrt=${C_LIB} -std=gnu++11 -fPIC" \
    CFLAGS="-mcrt=${C_LIB} -fPIC" \
    LDFLAGS="-mcrt=${C_LIB} -athread=native" \
    PKG_CONFIG_LIBDIR="/sdk/local/${C_CLIB}/lib/pkgconfig" \
    --disable-shared   \
    --enable-static    \
    --disable-dyload   \
    --enable-release   \
    --disable-debug    \
    --enable-tests     \
    --enable-samples   \
    --disable-extras    \
    --enable-layoutex  \
    --host=ppc-amigaos \
    --with-cross-build="$CROSS_BUILD_FULL_PATH" \
    --prefix="${INSTALL_PREFIX}" || \
        { _ERROR "Error during configure" 70 ; }

if [[ ! -f "rjdLast_${C_LIB}" ]]
then
    # clean everything, we are now building for a different C library
    make clean 2>&1
fi

if ! grep '###RJD' data/Makefile
then
    if [[ ! "$(sed -n '176p' data/Makefile)" =~ '$(PKGDATA_INVOKE)' ]]
    then
	_ERROR "Unexpected line found in line 176 of data/Makefile. It seems this version of ICU is different from when this script was written. See 'rjdMake' for this error text to understand the edits and/or contact 3246251196ryan@gmail.com." 80
    fi
    insert="@if [[ ! -f ../../libicudata_${C_LIB}.a ]] ; then echo \"### RJD ###\" ; echo \"### RJD: Pausing at this point because the build cannot continue without it continuing on the Amiga. You now need to perform a step on the amiga. Now, run \\\\\"./rjdMake amigafiles\\\\\"\" ; echo \"### RJD ###\" ; exit 90 ; else cp ../../libicudata_${C_LIB}.a ../lib/libicudata.a ; fi"

    sed -i "176d" data/Makefile
    sed -i "176i \	${insert}" data/Makefile
fi
echo "####" >> buildAmiga.log
echo "#### $(date)" >> buildAmiga.log
echo "####" >> buildAmiga.log
make VERBOSE=1 -j "${CORES}" 2>&1 | tee -a buildAmiga.log || { _ERROR "Error during building for HOST-MACHINE (see buildAmiga/buildAmiga.log)" 100  ; }

make install

popd

create_amiga_SDK_package

lha a libicu_72.1.lha local/

echo "#########"
echo "#########"
echo "Finished. For the SDK package see libicu_72.1.lha"
echo "#########"
echo "#########"

exit 0
